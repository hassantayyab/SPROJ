
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORORleftANDANDleftEQUALEQUALleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightNOTANDAND COMMA DIVIDE ELSE EQUAL EQUALEQUAL FALSE FUNCTION GE GT IDENTIFIER IF LBRACE LE LPAREN LT MINUS NOT NUMBER OROR PLUS RBRACE RETURN RPAREN SEMICOLON TIMES TRUE NOTEQUAL STATEMENT OPERATOR RELATIONALOPERATOR INT DOUBLE CHARS STRINGS BOOL LBRACK RBRACK FOR SPACE STRING CHAR VOID PRINTF INVERTED_COMMA PERCENTAGEprogram : statement programprogram : statements : statement statementsstatements : statement : assignmentstatement : ifstatement : forstatement : arraystatement : funcstatement : printstatement : func : type IDENTIFIER LPAREN args RPAREN LBRACE RBRACEargs : type IDENTIFIER COMMA argsargs : type IDENTIFIERargs : func : type IDENTIFIER LPAREN args RPAREN LBRACE statements RBRACEfunc : IDENTIFIER LPAREN rec RPAREN SEMICOLONrec : exprec : exp COMMA recrec : func : type IDENTIFIER LPAREN RPAREN LBRACE statements RBRACEassignment : IDENTIFIER OPERATOR SEMICOLONassignment : IDENTIFIER EQUAL exp SEMICOLONassignment : type IDENTIFIER EQUAL exp SEMICOLONassignment : type IDENTIFIER SEMICOLONif : IF LPAREN exp_if RPAREN LBRACE statements RBRACE else_elseifelse_elseif : elseif else_elseifelse_elseif : else else_elseifelse_elseif : elseif : ELSE IF LPAREN exp_if RPAREN LBRACE statements RBRACEelse : ELSE LBRACE statements RBRACEfor : FOR LPAREN exp_for RPAREN LBRACE statements RBRACEexp_if : IDENTIFIERexp_if : NUMBERexp_if : CHARexp_if : exp_if RELATIONALOPERATOR exp_ifexp_for : init exp_if SEMICOLON incrementinit : IDENTIFIER EQUAL exp SEMICOLONinit : IDENTIFIER SEMICOLONincrement : IDENTIFIER OPERATORincrement : IDENTIFIER EQUAL expexp : IDENTIFIERexp : NUMBERexp : CHARexp : TRUEexp : FALSEexp : IDENTIFIER LBRACK NUMBER RBRACKexp : IDENTIFIER LBRACK IDENTIFIER RBRACKexp : exp OPERATOR expexp : exp OPERATORarray : type IDENTIFIER LBRACK NUMBER RBRACK SEMICOLONarray : type IDENTIFIER LBRACK NUMBER RBRACK EQUAL LBRACE elements_array RBRACE SEMICOLONarray : type IDENTIFIER LBRACK RBRACK EQUAL LBRACE elements_array RBRACE SEMICOLONarray : IDENTIFIER LBRACK NUMBER RBRACK EQUAL exp SEMICOLONarray : IDENTIFIER LBRACK IDENTIFIER RBRACK EQUAL exp SEMICOLONelements_array : NUMBERelements_array : CHARelements_array : TRUEelements_array : FALSEelements_array : elements_array COMMA elements_arrayelements_array : print : PRINTF LPAREN STRING COMMA arguments RPAREN SEMICOLONarguments : exparguments : exp COMMA argumentsarguments : IDENTIFIERarguments : IDENTIFIER COMMA argumentsarguments : type : INTtype : DOUBLEtype : CHARStype : STRINGStype : BOOLtype : VOID'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,20,29,41,53,77,79,97,112,113,121,123,125,126,129,135,136,137,138,142,144,145,148,152,156,],[-2,0,-2,-5,-6,-7,-8,-9,-10,-1,-22,-25,-23,-17,-24,-51,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,-52,-31,-30,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,10,14,15,16,17,18,19,22,23,24,26,27,29,40,41,49,52,53,54,58,62,66,69,70,71,75,76,77,79,84,85,87,88,97,101,103,108,110,111,112,113,121,123,125,126,128,129,135,136,137,138,142,144,145,147,148,149,152,154,156,],[9,9,-5,-6,-7,-8,-9,-10,25,-68,-69,-70,-71,-72,-73,30,36,30,45,50,-22,30,-25,45,72,-23,30,30,82,45,30,-39,92,30,30,-17,-24,9,9,9,107,-51,9,9,-38,92,92,-55,-54,-12,-21,-29,-32,30,-62,-16,-26,-29,-29,-53,-27,-28,9,-52,45,-31,9,-30,]),'IF':([0,2,3,4,5,6,7,8,29,41,53,77,79,84,85,87,97,101,103,112,113,121,123,125,126,129,135,136,137,138,139,142,144,145,147,148,152,154,156,],[11,11,-5,-6,-7,-8,-9,-10,-22,-25,-23,-17,-24,11,11,11,-51,11,11,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,146,-53,-27,-28,11,-52,-31,11,-30,]),'FOR':([0,2,3,4,5,6,7,8,29,41,53,77,79,84,85,87,97,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[12,12,-5,-6,-7,-8,-9,-10,-22,-25,-23,-17,-24,12,12,12,-51,12,12,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,12,-52,-31,12,-30,]),'PRINTF':([0,2,3,4,5,6,7,8,29,41,53,77,79,84,85,87,97,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[13,13,-5,-6,-7,-8,-9,-10,-22,-25,-23,-17,-24,13,13,13,-51,13,13,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,13,-52,-31,13,-30,]),'INT':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[14,14,-5,-6,-7,-8,-9,-10,-22,-25,14,-23,-17,-24,14,14,14,-51,14,14,14,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,14,-52,-31,14,-30,]),'DOUBLE':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[15,15,-5,-6,-7,-8,-9,-10,-22,-25,15,-23,-17,-24,15,15,15,-51,15,15,15,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,15,-52,-31,15,-30,]),'CHARS':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[16,16,-5,-6,-7,-8,-9,-10,-22,-25,16,-23,-17,-24,16,16,16,-51,16,16,16,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,16,-52,-31,16,-30,]),'STRINGS':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[17,17,-5,-6,-7,-8,-9,-10,-22,-25,17,-23,-17,-24,17,17,17,-51,17,17,17,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,17,-52,-31,17,-30,]),'BOOL':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[18,18,-5,-6,-7,-8,-9,-10,-22,-25,18,-23,-17,-24,18,18,18,-51,18,18,18,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,18,-52,-31,18,-30,]),'VOID':([0,2,3,4,5,6,7,8,29,41,43,53,77,79,84,85,87,97,100,101,103,112,113,121,123,125,126,129,135,136,137,138,142,144,145,147,148,152,154,156,],[19,19,-5,-6,-7,-8,-9,-10,-22,-25,19,-23,-17,-24,19,19,19,-51,19,19,19,-55,-54,-12,-21,-29,-32,-62,-16,-26,-29,-29,-53,-27,-28,19,-52,-31,19,-30,]),'RBRACE':([3,4,5,6,7,8,29,41,53,77,79,84,85,87,97,99,101,102,103,104,105,112,113,114,115,116,117,118,119,121,122,123,124,125,126,129,132,134,135,136,137,138,142,143,144,145,147,148,150,152,154,155,156,],[-5,-6,-7,-8,-9,-10,-22,-25,-23,-17,-24,-4,-4,-4,-51,-61,121,123,-4,125,126,-55,-54,-61,133,-56,-57,-58,-59,-12,135,-21,-3,-29,-32,-62,141,-61,-16,-26,-29,-29,-53,-60,-27,-28,-4,-52,152,-31,-4,156,-30,]),'OPERATOR':([9,30,31,32,33,34,35,39,54,59,74,89,91,92,93,94,95,96,107,140,],[21,-42,54,-43,-44,-45,-46,54,-50,54,54,54,54,-42,-48,-47,54,54,127,54,]),'EQUAL':([9,25,50,55,56,61,80,107,],[22,40,69,75,76,81,98,128,]),'LBRACK':([9,25,30,92,],[23,42,52,52,]),'LPAREN':([9,11,12,13,25,146,],[24,26,27,28,43,149,]),'SEMICOLON':([21,25,30,31,32,33,34,35,45,46,47,50,54,57,59,68,74,80,86,89,93,94,95,96,109,133,141,],[29,41,-42,53,-43,-44,-45,-46,-33,-34,-35,70,-50,77,79,88,-49,97,-36,108,-48,-47,112,113,129,142,148,]),'NUMBER':([22,23,24,26,40,42,49,52,54,58,66,69,70,71,75,76,99,108,110,111,114,128,134,149,],[32,37,32,46,32,60,46,73,32,32,46,32,-39,32,32,32,116,-38,32,32,116,32,116,46,]),'CHAR':([22,24,26,40,49,54,58,66,69,70,71,75,76,99,108,110,111,114,128,134,149,],[33,33,47,33,47,33,33,47,33,-39,33,33,33,117,-38,33,33,117,33,117,47,]),'TRUE':([22,24,40,54,58,69,71,75,76,99,110,111,114,128,134,],[34,34,34,34,34,34,34,34,34,118,34,34,118,34,118,]),'FALSE':([22,24,40,54,58,69,71,75,76,99,110,111,114,128,134,],[35,35,35,35,35,35,35,35,35,119,35,35,119,35,119,]),'RPAREN':([24,30,32,33,34,35,38,39,43,44,45,46,47,48,54,58,63,71,74,78,82,86,90,91,92,93,94,100,106,110,111,120,127,130,131,140,151,],[-20,-42,-43,-44,-45,-46,57,-18,64,65,-33,-34,-35,67,-50,-20,83,-67,-49,-19,-14,-36,109,-63,-42,-48,-47,-15,-37,-67,-67,-13,-40,-64,-66,-41,153,]),'STRING':([28,],[51,]),'COMMA':([30,32,33,34,35,39,51,54,74,82,91,92,93,94,99,114,115,116,117,118,119,132,134,143,],[-42,-43,-44,-45,-46,58,71,-50,-49,100,110,111,-48,-47,-61,-61,134,-56,-57,-58,-59,134,-61,134,]),'RBRACK':([36,37,42,60,72,73,],[55,56,61,80,93,94,]),'RELATIONALOPERATOR':([44,45,46,47,68,86,151,],[66,-33,-34,-35,66,66,66,]),'LBRACE':([64,65,67,81,83,98,139,153,],[84,85,87,99,101,114,147,154,]),'ELSE':([125,137,138,152,156,],[139,139,139,-31,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,20,]),'statement':([0,2,84,85,87,101,103,147,154,],[2,2,103,103,103,103,103,103,103,]),'assignment':([0,2,84,85,87,101,103,147,154,],[3,3,3,3,3,3,3,3,3,]),'if':([0,2,84,85,87,101,103,147,154,],[4,4,4,4,4,4,4,4,4,]),'for':([0,2,84,85,87,101,103,147,154,],[5,5,5,5,5,5,5,5,5,]),'array':([0,2,84,85,87,101,103,147,154,],[6,6,6,6,6,6,6,6,6,]),'func':([0,2,84,85,87,101,103,147,154,],[7,7,7,7,7,7,7,7,7,]),'print':([0,2,84,85,87,101,103,147,154,],[8,8,8,8,8,8,8,8,8,]),'type':([0,2,43,84,85,87,100,101,103,147,154,],[10,10,62,10,10,10,62,10,10,10,10,]),'exp':([22,24,40,54,58,69,71,75,76,110,111,128,],[31,39,59,74,39,89,91,95,96,91,91,140,]),'rec':([24,58,],[38,78,]),'exp_if':([26,49,66,149,],[44,68,86,151,]),'exp_for':([27,],[48,]),'init':([27,],[49,]),'args':([43,100,],[63,120,]),'arguments':([71,110,111,],[90,130,131,]),'statements':([84,85,87,101,103,147,154,],[102,104,105,122,124,150,155,]),'increment':([88,],[106,]),'elements_array':([99,114,134,],[115,132,143,]),'else_elseif':([125,137,138,],[136,144,145,]),'elseif':([125,137,138,],[137,137,137,]),'else':([125,137,138,],[138,138,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement program','program',2,'p_program','parsing.py',71),
  ('program -> <empty>','program',0,'p_program_empty','parsing.py',75),
  ('statements -> statement statements','statements',2,'p_statements_continue','parsing.py',79),
  ('statements -> <empty>','statements',0,'p_statements_empty','parsing.py',83),
  ('statement -> assignment','statement',1,'p_statement_assignment','parsing.py',92),
  ('statement -> if','statement',1,'p_statement_if','parsing.py',96),
  ('statement -> for','statement',1,'p_statement_for','parsing.py',100),
  ('statement -> array','statement',1,'p_statement_array','parsing.py',104),
  ('statement -> func','statement',1,'p_statement_function','parsing.py',108),
  ('statement -> print','statement',1,'p_statement_print','parsing.py',112),
  ('statement -> <empty>','statement',0,'p_statement_empty','parsing.py',116),
  ('func -> type IDENTIFIER LPAREN args RPAREN LBRACE RBRACE','func',7,'p_func_empty','parsing.py',124),
  ('args -> type IDENTIFIER COMMA args','args',4,'p_args','parsing.py',128),
  ('args -> type IDENTIFIER','args',2,'p_args_2','parsing.py',132),
  ('args -> <empty>','args',0,'p_args_empty','parsing.py',136),
  ('func -> type IDENTIFIER LPAREN args RPAREN LBRACE statements RBRACE','func',8,'p_func','parsing.py',165),
  ('func -> IDENTIFIER LPAREN rec RPAREN SEMICOLON','func',5,'p_func_2','parsing.py',170),
  ('rec -> exp','rec',1,'p_rec_1','parsing.py',174),
  ('rec -> exp COMMA rec','rec',3,'p_rec','parsing.py',178),
  ('rec -> <empty>','rec',0,'p_rec_2','parsing.py',182),
  ('func -> type IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE','func',7,'p_func_3','parsing.py',187),
  ('assignment -> IDENTIFIER OPERATOR SEMICOLON','assignment',3,'p_assignment_sp','parsing.py',193),
  ('assignment -> IDENTIFIER EQUAL exp SEMICOLON','assignment',4,'p_assignment_1','parsing.py',197),
  ('assignment -> type IDENTIFIER EQUAL exp SEMICOLON','assignment',5,'p_assignment_declare','parsing.py',201),
  ('assignment -> type IDENTIFIER SEMICOLON','assignment',3,'p_assignment','parsing.py',205),
  ('if -> IF LPAREN exp_if RPAREN LBRACE statements RBRACE else_elseif','if',8,'p_if','parsing.py',209),
  ('else_elseif -> elseif else_elseif','else_elseif',2,'p_else_elseif_elseif','parsing.py',213),
  ('else_elseif -> else else_elseif','else_elseif',2,'p_else_elseif_else','parsing.py',217),
  ('else_elseif -> <empty>','else_elseif',0,'p_else_elseif_empty','parsing.py',221),
  ('elseif -> ELSE IF LPAREN exp_if RPAREN LBRACE statements RBRACE','elseif',8,'p_elseif','parsing.py',225),
  ('else -> ELSE LBRACE statements RBRACE','else',4,'p_else','parsing.py',229),
  ('for -> FOR LPAREN exp_for RPAREN LBRACE statements RBRACE','for',7,'p_for','parsing.py',233),
  ('exp_if -> IDENTIFIER','exp_if',1,'p_exp_if_identifier','parsing.py',237),
  ('exp_if -> NUMBER','exp_if',1,'p_exp_if_number','parsing.py',241),
  ('exp_if -> CHAR','exp_if',1,'p_exp_if_char','parsing.py',249),
  ('exp_if -> exp_if RELATIONALOPERATOR exp_if','exp_if',3,'p_exp_if_reloperator','parsing.py',254),
  ('exp_for -> init exp_if SEMICOLON increment','exp_for',4,'p_exp_for','parsing.py',258),
  ('init -> IDENTIFIER EQUAL exp SEMICOLON','init',4,'p_exp_for_init_1','parsing.py',262),
  ('init -> IDENTIFIER SEMICOLON','init',2,'p_exp_for_init_2','parsing.py',266),
  ('increment -> IDENTIFIER OPERATOR','increment',2,'p_for_increment_1','parsing.py',270),
  ('increment -> IDENTIFIER EQUAL exp','increment',3,'p_for_increment_2','parsing.py',274),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parsing.py',278),
  ('exp -> NUMBER','exp',1,'p_exp_number','parsing.py',282),
  ('exp -> CHAR','exp',1,'p_exp_char','parsing.py',290),
  ('exp -> TRUE','exp',1,'p_exp_bool','parsing.py',294),
  ('exp -> FALSE','exp',1,'p_exp_bool_0','parsing.py',298),
  ('exp -> IDENTIFIER LBRACK NUMBER RBRACK','exp',4,'p_exp_array','parsing.py',303),
  ('exp -> IDENTIFIER LBRACK IDENTIFIER RBRACK','exp',4,'p_exp_array_id','parsing.py',307),
  ('exp -> exp OPERATOR exp','exp',3,'p_exp_operator','parsing.py',311),
  ('exp -> exp OPERATOR','exp',2,'p_exp_operator_2','parsing.py',315),
  ('array -> type IDENTIFIER LBRACK NUMBER RBRACK SEMICOLON','array',6,'p_array','parsing.py',320),
  ('array -> type IDENTIFIER LBRACK NUMBER RBRACK EQUAL LBRACE elements_array RBRACE SEMICOLON','array',10,'p_array_declare','parsing.py',324),
  ('array -> type IDENTIFIER LBRACK RBRACK EQUAL LBRACE elements_array RBRACE SEMICOLON','array',9,'p_array_declare_empty','parsing.py',328),
  ('array -> IDENTIFIER LBRACK NUMBER RBRACK EQUAL exp SEMICOLON','array',7,'p_array_assign_2','parsing.py',332),
  ('array -> IDENTIFIER LBRACK IDENTIFIER RBRACK EQUAL exp SEMICOLON','array',7,'p_array_assign_3','parsing.py',336),
  ('elements_array -> NUMBER','elements_array',1,'p_elements_number','parsing.py',340),
  ('elements_array -> CHAR','elements_array',1,'p_elements_char','parsing.py',348),
  ('elements_array -> TRUE','elements_array',1,'p_elements_bool_1','parsing.py',352),
  ('elements_array -> FALSE','elements_array',1,'p_elements_bool_0','parsing.py',356),
  ('elements_array -> elements_array COMMA elements_array','elements_array',3,'p_elements_array','parsing.py',361),
  ('elements_array -> <empty>','elements_array',0,'p_elements_array_empty','parsing.py',365),
  ('print -> PRINTF LPAREN STRING COMMA arguments RPAREN SEMICOLON','print',7,'p_print','parsing.py',369),
  ('arguments -> exp','arguments',1,'p_arguments_3','parsing.py',373),
  ('arguments -> exp COMMA arguments','arguments',3,'p_arguments_2','parsing.py',377),
  ('arguments -> IDENTIFIER','arguments',1,'p_arguments_1','parsing.py',381),
  ('arguments -> IDENTIFIER COMMA arguments','arguments',3,'p_arguments','parsing.py',385),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parsing.py',389),
  ('type -> INT','type',1,'p_type_int','parsing.py',393),
  ('type -> DOUBLE','type',1,'p_type_double','parsing.py',397),
  ('type -> CHARS','type',1,'p_type_char','parsing.py',401),
  ('type -> STRINGS','type',1,'p_type_string','parsing.py',405),
  ('type -> BOOL','type',1,'p_type_bool','parsing.py',409),
  ('type -> VOID','type',1,'p_type_void','parsing.py',413),
]
